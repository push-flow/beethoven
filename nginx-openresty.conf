worker_processes 1;
daemon off;
env REDIS_MASTER_ADDRESS;
env REDIS_MASTER_PORT;
env REDIS_MASTER_DB;
events {

	worker_connections 1024;
}
http {

	server {

		listen 80;
		charset utf-8;
		location /bots {

			set $proxy_addr '';
			access_by_lua_block {

				local redis = require "resty.redis"
				local ngx_re = require "ngx.re"
				local red = redis:new()

				red:set_timeout(1000)

				local ok, err = red:connect(os.getenv("REDIS_MASTER_ADDRESS"), tonumber(os.getenv("REDIS_MASTER_PORT")))
				if not ok then
                                        ngx.say("failed to connect: ", err)
                                        return
				end

                                red:select(tonumber(os.getenv("REDIS_MASTER_DB")))

				function new_proxy()
					local servers = red:get("SERVERS_INSTANCES")
                                        servers, err = ngx_re.split(servers, " ")

                                        proxy = servers[1]
                                        table.remove(servers, 1)
                                        table.insert(servers, proxy)
                                        servers = table.concat(servers, " ")
                                        red:set("SERVERS_INSTANCES", servers)
					return proxy
				end

				function remove_server_instance(server_ip)
					local bots = red:get("SERVER-" .. server_ip)
					bots, err = ngx_re.split(bots, " ")
					for bot in bots do
						red:del(bot)
					end
					red:del("SERVER-" .. server_ip)
					local servers = red:get("SERVERS_INSTANCES")
                                        servers, err = ngx_re.split(servers, " ")
					for index, server in ipairs(servers) do
						if server == server_ip then
							table.remove(servers, index)
							break
						end
					end
				end

				local proxy = red:get("BOT-" .. ngx.var.arg_uuid)
				local check_server_alive = red:get("SERVER-ALIVE-" .. proxy)

				if proxy == ngx.null or check_server_alive == ngx.null then
					if check_server_alive == ngx.null then
						remove_server_instance(proxy)
					end
					proxy = new_proxy()
				end
				ngx.var.proxy_addr = proxy
			}
			proxy_pass http://$proxy_addr;
		}
                location /train-bot {
                        set $proxy_addr '';

                        access_by_lua_block {
                                local redis = require "resty.redis"
				local ngx_re = require "ngx.re"
				local red = redis:new()

				red:set_timeout(1000)

				local ok, err = red:connect(os.getenv("REDIS_MASTER_ADDRESS"), tonumber(os.getenv("REDIS_MASTER_PORT")))
				if not ok then
                                        ngx.say("failed to connect: ", err)
                                        return
				end
                                red:select(tonumber(os.getenv("REDIS_MASTER_DB")))

                                local servers = red:get("SERVERS_INSTANCES")
                                servers, err = ngx_re.split(servers, " ")
                                ngx.var.proxy_addr = servers[1]
                        }
                        proxy_pass http://$proxy_addr;
                }

	}
}